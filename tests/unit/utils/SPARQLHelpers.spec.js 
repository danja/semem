// tests/unit/utils/SPARQLHelpers.spec.js
import { SPARQLHelpers } from '../../../src/utils/SPARQLHelpers.js'

describe('SPARQLHelpers', () => {
    let mockFetch
    const testEndpoint = 'http://localhost:4030/test'
    const testAuth = 'Basic ' + Buffer.from('admin:admin123').toString('base64')

    beforeEach(() => {
        mockFetch = jasmine.createSpy('fetch').and.returnValue(
            Promise.resolve({
                ok: true,
                json: () => Promise.resolve({ results: { bindings: [] } }),
                text: () => Promise.resolve('')
            })
        )
        global.fetch = mockFetch
    })

    afterEach(() => {
        delete global.fetch
    })

    describe('Authentication', () => {
        it('should create valid auth headers', () => {
            const auth = SPARQLHelpers.createAuthHeader('user', 'pass')
            expect(auth).toMatch(/^Basic [A-Za-z0-9+/=]+$/)
            expect(atob(auth.split(' ')[1])).toBe('user:pass')
        })

        it('should handle special characters in credentials', () => {
            const auth = SPARQLHelpers.createAuthHeader('user@domain', 'pass#word')
            expect(() => atob(auth.split(' ')[1])).not.toThrow()
        })
    })

    describe('Query Execution', () => {
        it('should execute SPARQL queries', async () => {
            const query = 'SELECT * WHERE { ?s ?p ?o }'
            await SPARQLHelpers.executeSPARQLQuery(testEndpoint, query, testAuth)

            expect(mockFetch).toHaveBeenCalledWith(
                testEndpoint,
                jasmine.objectContaining({
                    method: 'GET',
                    headers: jasmine.objectContaining({
                        'Accept': 'application/sparql-results+json',
                        'Authorization': testAuth
                    }),
                    body: query
                })
            )
        })

        it('should handle query errors', async () => {
            mockFetch.and.returnValue(Promise.resolve({
                ok: false,
                status: 400,
                statusText: 'Bad Request'
            }))

            await expectAsync(
                SPARQLHelpers.executeSPARQLQuery(testEndpoint, 'INVALID QUERY', testAuth)
            ).toBeRejectedWithError(/SPARQL query failed: 400/)
        })

        it('should support different result formats', async () => {
            await SPARQLHelpers.executeSPARQLQuery(
                testEndpoint,
                'CONSTRUCT { ?s ?p ?o } WHERE { ?s ?p ?o }',
                testAuth,
                'text/turtle'
            )

            expect(mockFetch).toHaveBeenCalledWith(
                testEndpoint,
                jasmine.objectContaining({
                    headers: jasmine.objectContaining({
                        'Accept': 'text/turtle'
                    })
                })
            )
        })
    })

    describe('Update Operations', () => {
        it('should execute SPARQL updates', async () => {
            const update = 'INSERT DATA { <s> <p> <o> }'
            await SPARQLHelpers.executeSPARQLUpdate(testEndpoint, update, testAuth)

            expect(mockFetch).toHaveBeenCalledWith(
                testEndpoint,
                jasmine.objectContaining({
                    method: 'POST',
                    headers: jasmine.objectContaining({
                        'Content-Type': 'application/sparql-update',
                        'Authorization': testAuth
                    }),
                    body: update
                })
            )
        })

        it('should handle update errors', async () => {
            mockFetch.and.returnValue(Promise.resolve({
                ok: false,
                status: 500,
                statusText: 'Server Error'
            }))

            await expectAsync(
                SPARQLHelpers.executeSPARQLUpdate(testEndpoint, 'INVALID UPDATE', testAuth)
            ).toBeRejectedWithError(/SPARQL update failed: 500/)
        })
    })

    describe('Dataset Management', () => {
        it('should generate correct dataset endpoints', () => {
            const baseUrl = 'http://localhost:4030'
            const dataset = 'test'

            expect(SPARQLHelpers.getDatasetEndpoint(baseUrl, dataset, 'query'))
                .toBe('http://localhost:4030/test/query')

            expect(SPARQLHelpers.getDatasetEndpoint(baseUrl, dataset, 'update'))
                .toBe('http://localhost:4030/test/update')

            expect(SPARQLHelpers.getDatasetEndpoint(baseUrl, dataset, 'data'))
                .toBe('http://localhost:4030/test/data')
        })

        it('should handle trailing slashes', () => {
            const endpoint = SPARQLHelpers.getDatasetEndpoint(
                'http://localhost:4030/',
                'test',
                'query'
            )
            expect(endpoint).not.toContain('//')
        })
    })

    describe('Error Handling', () => {
        it('should handle network errors', async () => {
            mockFetch.and.returnValue(Promise.reject(new Error('Network error')))

            await expectAsync(
                SPARQLHelpers.executeSPARQLQuery(testEndpoint, 'SELECT *', testAuth)
            ).toBeRejected()
        })

        it('should handle malformed responses', async () => {
            mockFetch.and.returnValue(Promise.resolve({
                ok: true,
                json: () => Promise.reject(new Error('Invalid JSON'))
            }))

            await expectAsync(
                SPARQLHelpers.executeSPARQLQuery(testEndpoint, 'SELECT *', testAuth)
            ).toBeRejected()
        })

        it('should handle timeout errors', async () => {
            mockFetch.and.returnValue(new Promise((_, reject) =>
                setTimeout(() => reject(new Error('Timeout')), 100)
            ))

            await expectAsync(
                SPARQLHelpers.executeSPARQLQuery(testEndpoint, 'SELECT *', testAuth)
            ).toBeRejected()
        })
    })

    describe('Content Negotiation', () => {
        it('should support multiple response formats', async () => {
            const formats = [
                'application/sparql-results+json',
                'application/json',
                'text/turtle',
                'application/rdf+xml'
            ]

            for (const format of formats) {
                await SPARQLHelpers.executeSPARQLQuery(
                    testEndpoint,
                    'SELECT *',
                    testAuth,
                    format
                )

                expect(mockFetch).toHaveBeenCalledWith(
                    testEndpoint,
                    jasmine.objectContaining({
                        headers: jasmine.objectContaining({
                            'Accept': format
                        })
                    })
                )
            }
        })

        it('should default to JSON results format', async () => {
            await SPARQLHelpers.executeSPARQLQuery(testEndpoint, 'SELECT *', testAuth)

            expect(mockFetch).toHaveBeenCalledWith(
                testEndpoint,
                jasmine.objectContaining({
                    headers: jasmine.objectContaining({
                        'Accept': 'application/sparql-results+json'
                    })
                })
            )
        })
    })
})