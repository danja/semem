graph TD
    %% Tell Operation Information Flow - Current Architecture
    %% HTTP Entry Points
    A["Client Request"] -->|POST /tell| B["HTTP Server<br/>mcp/http-server.js:519"]
    A -->|POST /api/tell| C["Workbench UI API<br/>src/frontend/js/api/api.js"]
    
    %% Request Processing
    B --> D["Simple Verbs Service<br/>mcp/tools/simple-verbs.js:tell()"]
    C --> D
    
    %% Content Validation & Processing
    D --> E["Content Validation<br/>Check required content field"]
    E --> F["Safe Operations<br/>mcp/lib/safe-operations.js:storeInteraction()"]
    
    %% Embedding Generation Pipeline
    F --> G["Generate Embedding<br/>SafeOperations.generateEmbedding()"]
    G --> H["Embedding Handler<br/>src/handlers/EmbeddingHandler.js"]
    H -->|API Call| I["External Embedding Service<br/>Nomic API / Ollama nomic-embed-text"]
    I -->|1536-dim Vector| H
    
    %% Concept Extraction Pipeline
    F --> J["Extract Concepts<br/>SafeOperations.extractConcepts()"]
    J --> K["LLM Handler<br/>src/handlers/LLMHandler.js:extractConcepts()"]
    K -->|API Call| L["External LLM Service<br/>Mistral API / Ollama qwen2:1.5b"]
    L -->|Extracted Concepts| K
    
    %% Memory Storage Pipeline
    H --> M["Memory Manager<br/>src/MemoryManager.js:storeInteraction()"]
    K --> M
    M --> N["Prepare Memory Data<br/>id, prompt, response, embedding, concepts"]
    
    %% Dual Storage System
    N --> O["SPARQL Store<br/>src/stores/SPARQLStore.js:store()"]
    N --> P["Memory Store<br/>FAISS Index storage"]
    
    %% SPARQL RDF Creation
    O --> Q["Create Interaction RDF<br/>semem:Interaction + UUID"]
    Q --> R["Store Properties<br/>semem:prompt, semem:output, semem:embedding"]
    R --> S["Store Metadata<br/>semem:timestamp, semem:decayFactor=1.0"]
    S --> T["Store Concepts<br/>semem:concepts array"]
    
    %% SPARQL Persistence
    T --> U["SPARQL UPDATE Query<br/>INSERT DATA into graph"]
    U -->|HTTP POST| V["Fuseki SPARQL Endpoint<br/>localhost:4050/semem/update"]
    V --> W["Graph Storage<br/>http://hyperdata.it/content"]
    
    %% FAISS Index Storage
    P --> X["Add Vector to Index<br/>FAISS similarity index"]
    X --> Y["Update Index Metadata<br/>Store prompt/response mapping"]
    
    %% Session & Performance Tracking
    W --> Z["Session Cache Update<br/>Increment interactions, embeddings, concepts"]
    Y --> Z
    Z --> AA["Performance Metrics<br/>Duration tracking, memory usage"]
    
    %% Response Generation
    AA --> BB["Success Response<br/>JSON: stored=true, concepts=N, sessionCached=true"]
    BB --> CC["Performance Details<br/>operationId, totalDuration, phases"]
    CC --> DD["HTTP Response<br/>200 OK with operation metadata"]
    
    %% Error Handling
    G --> EE{Embedding<br/>Generation Failed?}
    EE -->|Yes| FF["Error Response<br/>Failed to generate embedding"]
    J --> GG{Concept<br/>Extraction Failed?}
    GG -->|Yes| HH["Error Response<br/>Failed to extract concepts"]
    U --> II{SPARQL<br/>Update Failed?}
    II -->|Yes| JJ["Error Response<br/>Storage failed"]
    
    %% Configuration Integration
    KK["Configuration<br/>config/preferences.js"] --> G
    KK --> J
    KK --> O
    
    %% Styling
    classDef http fill:#e1f5fe,stroke:#0277bd
    classDef processing fill:#f3e5f5,stroke:#7b1fa2
    classDef storage fill:#e8f5e8,stroke:#388e3c
    classDef external fill:#ffcdd2,stroke:#d32f2f
    classDef config fill:#fff3e0,stroke:#f57c00
    classDef error fill:#ffebee,stroke:#c62828
    classDef response fill:#e0f2f1,stroke:#00695c
    
    class A,B,C,DD http
    class D,E,F,G,J,M,N processing
    class O,P,W,X storage
    class I,L,V external
    class KK config
    class EE,FF,GG,HH,II,JJ error
    class BB,CC response