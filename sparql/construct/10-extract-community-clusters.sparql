PREFIX ragno: <http://purl.org/stuff/ragno/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX semem: <http://purl.org/stuff/semem/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

# Extract community clusters and their semantic relationships (updated for actual data structure)
# Creates communities based on ragno:connectsTo relationships and semantic similarity
CONSTRUCT {
    ?community rdf:type ragno:Community ;
               rdfs:label ?communityLabel ;
               ragno:communityType ?communityType ;
               ragno:clusteringAlgorithm ?algorithm ;
               ragno:cohesionScore ?cohesion ;
               ragno:memberCount ?memberCount ;
               ragno:centralConcepts ?centralConcepts ;
               ragno:communityKeywords ?keywords ;
               ragno:interactionAnchor ?anchorInteraction ;
               dcterms:created ?clusterTime ;
               ragno:description ?description .
    
    # Community membership relationships
    ?member ragno:belongsToCommunity ?community ;
            ragno:membershipScore ?membershipScore ;
            ragno:roleInCommunity ?role ;
            ragno:memberType ?memberType .
    
    # Inter-community relationships
    ?community ragno:connectedTo ?otherCommunity ;
               ragno:connectionType ?connectionType ;
               ragno:connectionStrength ?connectionStrength .
    
    # Community stability metrics
    ?community ragno:stabilityScore ?stability ;
               ragno:densityScore ?density ;
               ragno:diversityIndex ?diversity .
}
WHERE {
    GRAPH <${graphURI}> {
        # Create communities based on interaction anchors and their connected concepts
        {
            SELECT ?interaction ?interactionPrompt 
                   (GROUP_CONCAT(DISTINCT ?conceptLabel; separator=", ") AS ?centralConcepts)
                   (COUNT(DISTINCT ?concept) AS ?memberCount)
            WHERE {
                # Find interactions with connected concepts
                ?interaction a semem:Interaction ;
                            semem:prompt ?interactionPrompt .
                ?concept a skos:Concept ;
                        skos:prefLabel ?conceptLabel ;
                        ragno:connectsTo ?interaction .
            }
            GROUP BY ?interaction ?interactionPrompt
            HAVING(COUNT(DISTINCT ?concept) > 0)
        }
        
        # Determine community type based on interaction content
        BIND(
            IF(CONTAINS(LCASE(?interactionPrompt), "music") || CONTAINS(LCASE(?interactionPrompt), "visualization"),
               "music-visualization",
               IF(CONTAINS(LCASE(?interactionPrompt), "lyrics") || CONTAINS(LCASE(?interactionPrompt), "song"),
                  "songwriting",
                  IF(CONTAINS(LCASE(?interactionPrompt), "adhd") || CONTAINS(LCASE(?interactionPrompt), "personal"),
                     "personal-narrative",
                     "general-content"))) AS ?communityType
        )
        
        # Create community URIs
        BIND(IRI(CONCAT("http://purl.org/stuff/semem/community/", ?communityType)) AS ?community)
        
        # Create community labels
        BIND(
            CONCAT("Community: ", 
                   REPLACE(REPLACE(?communityType, "-", " "), "([a-z])([A-Z])", "$1 $2"),
                   " (", STR(?memberCount), " concepts)") AS ?communityLabel
        )
        
        # Set clustering metadata
        BIND("connection-based" AS ?algorithm)
        BIND(NOW() AS ?clusterTime)
        BIND(?interaction AS ?anchorInteraction)
        
        # Create descriptions
        BIND(
            IF(?communityType = "music-visualization", "Community centered around music creation and visualization concepts",
               IF(?communityType = "songwriting", "Community focused on songwriting, lyrics, and musical composition",
                  IF(?communityType = "personal-narrative", "Community built around personal stories and experiences",
                     "General content community with diverse topics"))) AS ?description
        )
        
        # Calculate cohesion score based on concept density
        BIND(
            IF(?memberCount >= 10, 0.9,
               IF(?memberCount >= 5, 0.7,
                  IF(?memberCount >= 2, 0.5, 0.3))) AS ?cohesion
        )
        
        # Extract community keywords from concepts
        BIND(CONCAT(?centralConcepts, ",", ?communityType) AS ?keywords)
        
        # Find community members (concepts connected to the anchor interaction)
        OPTIONAL {
            ?member a skos:Concept ;
                   ragno:connectsTo ?interaction .
                   
            OPTIONAL { ?member skos:prefLabel ?memberLabel }
            OPTIONAL { ?member ragno:content ?memberContent }
            
            # Determine member type
            OPTIONAL { ?member rdf:type ?memberRDFType }
            BIND(
                IF(?memberRDFType = skos:Concept, "concept",
                   IF(?memberRDFType = ragno:Element, "element", "unknown")) AS ?memberType
            )
            
            # Calculate membership score based on connection strength
            BIND(
                IF(BOUND(?memberContent) && STRLEN(?memberContent) > 10, 0.8,
                   IF(BOUND(?memberLabel), 0.6, 0.4)) AS ?membershipScore
            )
            
            # Determine role based on content richness
            BIND(
                IF(?membershipScore >= 0.7, "core",
                   IF(?membershipScore >= 0.5, "active", "peripheral")) AS ?role
            )
        }
        
        # Find inter-community connections (shared concepts between interactions)
        OPTIONAL {
            ?otherInteraction a semem:Interaction .
            ?sharedConcept ragno:connectsTo ?interaction ;
                          ragno:connectsTo ?otherInteraction .
            FILTER(?interaction != ?otherInteraction)
            
            # Get other community type
            OPTIONAL { ?otherInteraction semem:prompt ?otherPrompt }
            BIND(
                IF(CONTAINS(LCASE(?otherPrompt), "music") || CONTAINS(LCASE(?otherPrompt), "visualization"),
                   "music-visualization",
                   IF(CONTAINS(LCASE(?otherPrompt), "lyrics") || CONTAINS(LCASE(?otherPrompt), "song"),
                      "songwriting",
                      IF(CONTAINS(LCASE(?otherPrompt), "adhd") || CONTAINS(LCASE(?otherPrompt), "personal"),
                         "personal-narrative",
                         "general-content"))) AS ?otherCommunityType
            )
            
            BIND(IRI(CONCAT("http://purl.org/stuff/semem/community/", ?otherCommunityType)) AS ?otherCommunity)
            
            FILTER(?community != ?otherCommunity)
            
            BIND("shared-concepts" AS ?connectionType)
            
            # Count shared concepts for connection strength
            {
                SELECT ?interaction ?otherInteraction (COUNT(DISTINCT ?shared) AS ?sharedCount) WHERE {
                    ?shared ragno:connectsTo ?interaction ;
                           ragno:connectsTo ?otherInteraction .
                    FILTER(?interaction != ?otherInteraction)
                }
                GROUP BY ?interaction ?otherInteraction
            }
            
            BIND(
                IF(?sharedCount >= 3, 0.8,
                   IF(?sharedCount >= 2, 0.6, 0.4)) AS ?connectionStrength
            )
        }
        
        # Calculate stability and density metrics
        BIND(
            IF(?cohesion >= 0.7, 0.8,
               IF(?cohesion >= 0.5, 0.6, 0.4)) AS ?stability
        )
        
        BIND(
            IF(?memberCount > 0, ?memberCount / 20.0, 0.1) AS ?density
        )
        
        BIND(
            IF(?communityType = "general-content", 0.9, 0.5) AS ?diversity
        )
    }
}
ORDER BY DESC(?memberCount) ?communityType