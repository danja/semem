PREFIX ragno: <http://purl.org/stuff/ragno/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX olo: <http://purl.org/ontology/olo/core#>
PREFIX semem: <http://purl.org/stuff/semem/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

# Extract provenance chains showing content derivation paths (updated for actual data structure)
# Tracks how knowledge flows from interactions through chunks to concepts
CONSTRUCT {
    ?element rdf:type ragno:ProvenanceElement ;
             rdfs:label ?elementLabel ;
             ragno:content ?content ;
             ragno:processingStage ?stage ;
             ragno:processingLevel ?level ;
             prov:wasDerivedFrom ?source ;
             dcterms:created ?created ;
             ragno:derivationPath ?path ;
             ragno:originalSource ?rootSource ;
             ragno:derivationChain ?chainInfo .
    
    # Create simplified derivation relationships
    ?element ragno:derivedFrom ?source ;
             ragno:derivationLevel ?level .
    
    # Create processing flow information
    ?derivation rdf:type ragno:DerivationStep ;
                ragno:fromType ?sourceType ;
                ragno:toType ?targetType ;
                ragno:stepType ?stepType ;
                ragno:stepDescription ?stepDescription .
}
WHERE {
    GRAPH ?g {
        # Find elements with derivation relationships
        ?element prov:wasDerivedFrom ?source .
        
        # Core element properties
        OPTIONAL { ?element rdfs:label ?elementLabel }
        OPTIONAL { ?element ragno:content ?content }
        OPTIONAL { ?element dcterms:created ?created }
        
        # Get element types
        OPTIONAL { ?element rdf:type ?elementType }
        OPTIONAL { ?source rdf:type ?sourceElementType }
        
        # Determine element types and processing stages
        BIND(
            IF(?elementType = semem:Interaction,
               "interaction-creation",
               IF(?elementType = ragno:Unit || ?elementType = ragno:TextElement,
                  "chunk-extraction",
                  IF(?elementType = skos:Concept,
                     "concept-derivation",
                     IF(?elementType = ragno:Element,
                        "element-processing",
                        "unknown-processing")))) AS ?stage
        )
        
        # Determine source and target types
        BIND(
            IF(?sourceElementType = semem:Interaction, "Interaction",
               IF(?sourceElementType = ragno:Unit || ?sourceElementType = ragno:TextElement, "Chunk",
                  IF(?sourceElementType = skos:Concept, "Concept",
                     IF(?sourceElementType = ragno:Element, "Element",
                        "Unknown")))) AS ?sourceType
        )
        
        BIND(
            IF(?elementType = semem:Interaction, "Interaction",
               IF(?elementType = ragno:Unit || ?elementType = ragno:TextElement, "Chunk",
                  IF(?elementType = skos:Concept, "Concept",
                     IF(?elementType = ragno:Element, "Element",
                        "Unknown")))) AS ?targetType
        )
        
        # Create step descriptions
        BIND(
            CONCAT(?sourceType, " → ", ?targetType) AS ?stepType
        )
        
        BIND(
            IF(?stage = "chunk-extraction", "Text decomposition into semantic chunks",
               IF(?stage = "concept-derivation", "Concept extraction from interaction content",
                  IF(?stage = "element-processing", "Element processing and enhancement",
                     "Content transformation and processing"))) AS ?stepDescription
        )
        
        # Calculate processing level (how many derivation steps from root)
        {
            SELECT ?element (COUNT(?intermediate) AS ?level) WHERE {
                {
                    SELECT ?element ?intermediate WHERE {
                        ?element prov:wasDerivedFrom* ?intermediate .
                        ?intermediate prov:wasDerivedFrom+ ?root .
                        FILTER NOT EXISTS { ?root prov:wasDerivedFrom ?parent }
                    }
                }
            }
            GROUP BY ?element
        }
        
        # Find the root source (interaction level typically)
        {
            SELECT ?element ?rootSource WHERE {
                ?element prov:wasDerivedFrom* ?rootSource .
                FILTER NOT EXISTS { ?rootSource prov:wasDerivedFrom ?parent }
            }
        }
        
        # Create derivation path string
        BIND(
            CONCAT(
                "Level ", STR(?level), ": ",
                COALESCE(STR(?rootSource), "Unknown"), 
                " ⟶ ",
                ?stage,
                " ⟶ ",
                COALESCE(?elementLabel, STR(?element))
            ) AS ?path
        )
        
        # Create chain information
        BIND(
            CONCAT(
                "Derivation: ",
                ?sourceType,
                " generated ",
                ?targetType,
                " via ",
                ?stage
            ) AS ?chainInfo
        )
        
        # Create derivation URI for additional metadata
        BIND(IRI(CONCAT(STR(?element), "/derivation/", REPLACE(STR(?source), "[^a-zA-Z0-9]", ""))) AS ?derivation)
    }
}
ORDER BY ?level ?created